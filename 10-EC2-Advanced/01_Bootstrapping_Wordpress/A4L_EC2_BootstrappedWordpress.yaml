
Description:  A4L Generic EC2 Public Instance. 
  Requires A4L VPC Template to run
Parameters:
  LatestAmiId:
    Description: AMI for Bastion Host (default is latest AmaLinux2)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Name of an existing SSH Keypair to access the instance"
  DBName:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Default: a4lwordpress
    Description: The WordPress database name
    MaxLength: '64'
    MinLength: '1'
    Type: String
  DBPassword:
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
    Description: The WordPress database admin account password
    MaxLength: '41'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  DBRootPassword:
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
    Description: MySQL root password
    MaxLength: '41'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  DBUser:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Description: The WordPress database admin account username
    Default: a4lwordpress
    MaxLength: '16'
    MinLength: '1'
    NoEcho: 'true'
    Type: String
Resources:
  Wordpress:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      InstanceType: "t2.micro"
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref SessionManagerInstanceProfile
      SubnetId: !ImportValue a4l-vpc1-subnet-weba
      SecurityGroupIds: 
        - !ImportValue a4l-vpc1-default-instance-sg
      Tags:
        - Key: Name
          Value: A4L-Wordpress
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # System Updates
          yum -y update
          yum -y upgrade
          # STEP 2 - Install system software - including Web and DB
          yum install -y mariadb-server httpd wget cowsay
          amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
          # STEP 3 - Web and DB Servers Online - and set to startup
          systemctl enable httpd
          systemctl enable mariadb
          systemctl start httpd
          systemctl start mariadb
          # STEP 4 - Set Mariadb Root Password
          mysqladmin -u root password ${DBRootPassword}
          # STEP 5 - Install Wordpress
          wget http://wordpress.org/latest.tar.gz -P /var/www/html
          cd /var/www/html
          tar -zxvf latest.tar.gz
          cp -rvf wordpress/* .
          rm -R wordpress
          rm latest.tar.gz
          # STEP 6 - Configure Wordpress
          cp ./wp-config-sample.php ./wp-config.php
          sed -i "s/'database_name_here'/'${DBName}'/g" wp-config.php
          sed -i "s/'username_here'/'${DBUser}'/g" wp-config.php
          sed -i "s/'password_here'/'${DBPassword}'/g" wp-config.php
          # Step 6a - permissions   
          usermod -a -G apache ec2-user   
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;
          # STEP 7 Create Wordpress DB
          echo "CREATE DATABASE ${DBName};" >> /tmp/db.setup
          echo "CREATE USER '${DBUser}'@'localhost' IDENTIFIED BY '${DBPassword}';" >> /tmp/db.setup
          echo "GRANT ALL ON ${DBName}.* TO '${DBUser}'@'localhost';" >> /tmp/db.setup
          echo "FLUSH PRIVILEGES;" >> /tmp/db.setup
          mysql -u root --password=${DBRootPassword} < /tmp/db.setup
          sudo rm /tmp/db.setup
          # STEP 8 COWSAY
          echo "#!/bin/sh" > /etc/update-motd.d/40-cow
          echo 'cowsay "Amazon Linux 2 AMI - Animals4Life"' >> /etc/update-motd.d/40-cow
          chmod 755 /etc/update-motd.d/40-cow
          rm /etc/update-motd.d/30-banner
          update-motd
  SessionManagerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'ssm:DescribeAssociation'
                  - 'ssm:GetDeployablePatchSnapshotForInstance'
                  - 'ssm:GetDocument'
                  - 'ssm:DescribeDocument'
                  - 'ssm:GetManifest'
                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                  - 'ssm:ListAssociations'
                  - 'ssm:ListInstanceAssociations'
                  - 'ssm:PutInventory'
                  - 'ssm:PutComplianceItems'
                  - 'ssm:PutConfigurePackageResult'
                  - 'ssm:UpdateAssociationStatus'
                  - 'ssm:UpdateInstanceAssociationStatus'
                  - 'ssm:UpdateInstanceInformation'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel' 
                Resource: '*'
              - Effect: Allow
                Action: 
                  - 'ec2messages:AcknowledgeMessage'
                  - 'ec2messages:DeleteMessage'
                  - 'ec2messages:FailMessage'
                  - 'ec2messages:GetEndpoint'
                  - 'ec2messages:GetMessages'
                  - 'ec2messages:SendReply'
                Resource: '*'
  SessionManagerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref SessionManagerRole