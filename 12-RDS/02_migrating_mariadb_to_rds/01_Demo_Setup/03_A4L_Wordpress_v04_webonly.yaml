
Description:  A4L Wordpress Template (NODB). Requires A4L VPC v3+ & MariaDB Templates to run
  Requires AmazonCloudWatch-linux in SSM for agent config
  /A4L/DefaultInstance - used for instance size
  /A4L/Wordpress/DBName - DB Created
  /A4L/Wordpress/DBUser - User given root permissions
  /A4L/Wordpress/DBPassword - password for that user
  /A4L/Wordpress/DBRootPassword - DB Root Password
Parameters:
  LatestAmiId:
    Description: AMI for Instance (default is latest AmaLinux2)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Name of an existing SSH Keypair to access the instance"
    Default: A4L
  SSMKey:
    Description: Name of parameter store which contains the json configuration of CWAgent.
    Type : String
    Default: AmazonCloudWatch-linux
Resources:
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole
  EC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Properties:
      KeyName: !Ref KeyName
      InstanceType: "{{resolve:ssm:/A4L/DefaultInstance:1}}"
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref InstanceProfile
      SubnetId: !ImportValue a4l-vpc1-subnet-weba
      SecurityGroupIds: 
        - !ImportValue a4l-vpc1-default-instance-sg
      Tags:
        - Key: Name
          Value: A4L-Wordpress
      UserData:
        Fn::Base64: !Sub 
          - |
            #!/bin/bash -xe
            yum -y update
            # STEP 1 - Set Config variables
            DBPassword=$(aws ssm get-parameters --region us-east-1 --names /A4L/Wordpress/DBPassword --with-decryption --query Parameters[0].Value)
            DBPassword=`echo $DBPassword | sed -e 's/^"//' -e 's/"$//'`
            DBUser=$(aws ssm get-parameters --region us-east-1 --names /A4L/Wordpress/DBUser --query Parameters[0].Value)
            DBUser=`echo $DBUser | sed -e 's/^"//' -e 's/"$//'`
            DBName=$(aws ssm get-parameters --region us-east-1 --names /A4L/Wordpress/DBName --query Parameters[0].Value)
            DBName=`echo $DBName | sed -e 's/^"//' -e 's/"$//'`

            # STEP 2 - Begin Configuration
            yum -y install httpd wget cowsay mariadb
            amazon-linux-extras install -y php7.2
            systemctl enable httpd
            systemctl start httpd

            # STEP 3 - CWAgent Install
            rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            mkdir -p /usr/share/collectd/
            touch /usr/share/collectd/types.db
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${SSMKey} -s

            # STEP 4 - Install Wordpress
            wget http://wordpress.org/latest.tar.gz -P /var/www/html
            cd /var/www/html
            tar -zxvf latest.tar.gz
            cp -rvf wordpress/* .
            rm -R wordpress
            rm latest.tar.gz

            # STEP 5 - Configure Wordpress
            cp ./wp-config-sample.php ./wp-config.php
            sed -i "s/'localhost'/'${a4ldbendpoint}'/g" wp-config.php
            sed -i "s/'database_name_here'/'$DBName'/g" wp-config.php
            sed -i "s/'username_here'/'$DBUser'/g" wp-config.php
            sed -i "s/'password_here'/'$DBPassword'/g" wp-config.php

            # Step 6a - permissions 
            usermod -a -G apache ec2-user   
            chown -R ec2-user:apache /var/www
            chmod 2775 /var/www
            find /var/www -type d -exec chmod 2775 {} \;
            find /var/www -type f -exec chmod 0664 {} \;

            # STEP 6 COWSAY
            echo "#!/bin/sh" > /etc/update-motd.d/40-cow
            echo 'cowsay "Amazon Linux 2 AMI - Animals4Life"' >> /etc/update-motd.d/40-cow
            chmod 755 /etc/update-motd.d/40-cow
            rm /etc/update-motd.d/30-banner
            update-motd

            # Step 7 Create update_wp_id.sh file
            cat >> /home/ec2-user/update_wp_ip.sh<< 'EOF'
            #!/bin/bash
            source <(php -r 'require("/var/www/html/wp-config.php"); echo("DB_NAME=".DB_NAME."; DB_USER=".DB_USER."; DB_PASSWORD=".DB_PASSWORD."; DB_HOST=".DB_HOST); ')
            SQL_COMMAND="mysql -u $DB_USER -h $DB_HOST -p$DB_PASSWORD $DB_NAME -e"
            OLD_URL=$(mysql -u $DB_NAME -h $DB_HOST -p$DB_PASSWORD $DB_NAME -e 'select option_value from wp_options where option_id = 1;' | grep http)
            HOST=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
            $SQL_COMMAND "UPDATE wp_options SET option_value = replace(option_value, '$OLD_URL', 'http://$HOST') WHERE option_name = 'home' OR option_name = 'siteurl';"
            $SQL_COMMAND "UPDATE wp_posts SET guid = replace(guid, '$OLD_URL','http://$HOST');"
            $SQL_COMMAND "UPDATE wp_posts SET post_content = replace(post_content, '$OLD_URL', 'http://$HOST');"
            $SQL_COMMAND "UPDATE wp_postmeta SET meta_value = replace(meta_value,'$OLD_URL','http://$HOST');"
            EOF

            chmod 755 /home/ec2-user/update_wp_ip.sh
            echo "/home/ec2-user/update_wp_ip.sh" >> /etc/rc.local
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}
            /home/ec2-user/update_wp_ip.sh
            

          - a4ldbendpoint: !ImportValue a4l-db-endpoint
